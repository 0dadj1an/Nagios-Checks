#!/usr/bin/perl


## Script written by Noah Guttman and Copyright (C) 2011 Noah Guttman. This script is released and distributed under the terms of the GNU General Public License

#Libraries to use
#use strict;
#use Math::Round;
use Getopt::Std;
use Time::HiRes qw(gettimeofday);
use strict;
use lib "/usr/local/nagios/perl/lib";
use lib "/usr/local/nagios/libexec/";
use utils qw($TIMEOUT %ERRORS &print_revision &support);
use vars qw($PROGNAME);
use IO::Socket::INET;
#use Sys::Hostname;
use Time::HiRes qw(gettimeofday ualarm);
use Net::Domain qw (hostname hostfqdn hostdomain);

use vars qw($opt_h $opt_H $opt_M $opt_P $opt_w $opt_c);
my $returnmessage = " ";
my $PageFileBytes_check;
my $PoolNonpagedBytes_check;
my $PoolPagedBytes_check;
my $PrivateBytes_check;
my $VirtualBytes_check;

my $PageFileBytes_checkresult;
my $PoolNonpagedBytes_checkresult;
my $PoolPagedBytes_checkresult;
my $PrivateBytes_checkresult;
my $VirtualBytes_checkresult;

my $memoryusage;
$opt_w = 500000000;
$opt_c = 800000000;
##init();

# Get the options
if ($#ARGV le 0) {
        print "::Windows Process Memory Check Instructions::\n\n";
        print " -h,             Display this help information\n";
        print " -H,             Hostname or IP to check\n";
        print " -M,             Specify a message to return on failure\n";
        print " -P,             Process to check\n";
        print " -w,             More than this many PrivateBytes returns a warning\n";
        print "                  The default is 300000000\n";
        print " -c,             More than this many PrivateBytes returns a critical\n";
        print "                  The default is 800000000\n";
	print " PageFileBytes - Value, in bytes, that this process has used in the paging file(s). Paging files store pages of memory used by the process that are not contained in other files. Paging files are shared by all processes and lack of space in paging files can prevent other processes from allocating memory.\n";
	print " PoolNonpagedBytes - Value, in bytes, in the nonpaged pool, an area of system memory (physical memory used by the operating system) for objects that cannot be written to disk, but must remain in physical memory as long as they are allocated.\n";
	print " PoolPagedBytes - Value, in bytes, in the paged pool, an area of system memory (physical memory used by the operating system) for objects that can be written to disk when they are not being used.\n";
	print " PrivateBytes - Current value, in bytes, that this process has allocated that cannot be shared with other processes.\n";
	print " VirtualBytes - Current size, in bytes, of the virtual address space that the process is using. Use of virtual address space does not necessarily imply corresponding use of either disk or main memory pages. Virtual space is finite and, by using too much, the process can limit its ability to load libraries.\n";
        print "Script written by Noah Guttman and Copyright (C) 2011 Noah Guttman.\n";
        print "This script is released and distributed under the terms of the GNU\n";
        print "General Public License.     >>>>    http://www.gnu.org/licenses/\n";
        print "";
        print "This program is free software: you can redistribute it and/or modify\n";
        print "it under the terms of the GNU General Public License as published by\n";
        print "the Free Software Foundation.\n\n";
        print "This program is distributed in the hope that it will be useful,\n";
        print "but WITHOUT ANY WARRANTY; without even the implied warranty of\n";
        print "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n";
        print "GNU General Public License for more details.\n";
        print ">>>>    http://www.gnu.org/licenses/\n";
        exit 0;
} else {
	getopts('hH:M:P:w:c:');
}


## Display Help
if ($opt_h){
        print "::Windows Process Memory Check Instructions::\n\n";
        print " -h,             Display this help information\n";
        print " -H,             Hostname or IP to check\n";
        print " -M,             Specify a message to return on failure\n";
        print " -P,             Process to check\n";
        print " -w,             More than this many PrivateBytes returns a warning\n";
        print "                  The default is 300000000\n";
        print " -c,             More than this many PrivateBytes returns a critical\n";
        print "                  The default is 800000000\n";
        print " PageFileBytes - Value, in bytes, that this process has used in the paging file(s). Paging files store pages of memory used by the process that are not contained in other files. Paging files are shared by all processes and lack of space in paging files can prevent other processes from allocating memory.\n";
        print " PoolNonpagedBytes - Value, in bytes, in the nonpaged pool, an area of system memory (physical memory used by the operating system) for objects that cannot be written to disk, but must remain in physical memory as long as they are allocated.\n";
        print " PoolPagedBytes - Value, in bytes, in the paged pool, an area of system memory (physical memory used by the operating system) for objects that can be written to disk when they are not being used.\n";
        print " PrivateBytes - Current value, in bytes, that this process has allocated that cannot be shared with other processes.\
n";
        print " VirtualBytes - Current size, in bytes, of the virtual address space that the process is using. Use of virtual address space does not necessarily imply corresponding use of either disk or main memory pages. Virtual space is finite and, by using too much, the process can limit its ability to load libraries.\n";
        print "Script written by Noah Guttman and Copyright (C) 2011 Noah Guttman.\n";
        print "This script is released and distributed under the terms of the GNU\n";
        print "General Public License.     >>>>    http://www.gnu.org/licenses/\n";
        print "";
        print "This program is free software: you can redistribute it and/or modify\n";
        print "it under the terms of the GNU General Public License as published by\n";
        print "the Free Software Foundation.\n\n";
        print "This program is distributed in the hope that it will be useful,\n";
        print "but WITHOUT ANY WARRANTY; without even the implied warranty of\n";
        print "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n";
        print "GNU General Public License for more details.\n";
        print ">>>>    http://www.gnu.org/licenses/\n";
        exit 0;
}

##Set custom output if any set
if ($opt_M){
	$returnmessage=$opt_M;
}else{
	$returnmessage="";
}
$PageFileBytes_check = ("-H $opt_H -c CheckWMI -a \"Query\=select PageFileBytes from Win32_PerfRAWData_PerfProc_Process where Name=\'$opt_P\'\"");
$PoolNonpagedBytes_check = ("-H $opt_H -c CheckWMI -a \"Query\=select PoolNonpagedBytes from Win32_PerfRAWData_PerfProc_Process where Name=\'$opt_P\'\"");
$PoolPagedBytes_check = ("-H $opt_H -c CheckWMI -a \"Query\=select PoolPagedBytes from Win32_PerfRAWData_PerfProc_Process where Name=\'$opt_P\'\"");
$PrivateBytes_check = ("-H $opt_H -c CheckWMI -a \"Query\=select PrivateBytes from Win32_PerfRAWData_PerfProc_Process where Name=\'$opt_P\'\"");
$VirtualBytes_check = ("-H $opt_H -c CheckWMI -a \"Query\=select VirtualBytes from Win32_PerfRAWData_PerfProc_Process where Name=\'$opt_P\'\"");

$PageFileBytes_checkresult = `/usr/local/nagios/libexec/check_nrpe $PageFileBytes_check`;
$PoolNonpagedBytes_checkresult = `/usr/local/nagios/libexec/check_nrpe $PoolNonpagedBytes_check`;
$PoolPagedBytes_checkresult = `/usr/local/nagios/libexec/check_nrpe $PoolPagedBytes_check`;
$PrivateBytes_checkresult = `/usr/local/nagios/libexec/check_nrpe $PrivateBytes_check`;
$VirtualBytes_checkresult = `/usr/local/nagios/libexec/check_nrpe $VirtualBytes_check`;

chomp($PageFileBytes_checkresult);
chomp($PoolNonpagedBytes_checkresult);
chomp($PoolPagedBytes_checkresult);
chomp($PrivateBytes_checkresult);
chomp($VirtualBytes_checkresult);

$PageFileBytes_checkresult=$PageFileBytes_checkresult."B";
$PoolNonpagedBytes_checkresult=$PoolNonpagedBytes_checkresult."B";
$PoolPagedBytes_checkresult=$PoolPagedBytes_checkresult."B";
$PrivateBytes_checkresult=$PrivateBytes_checkresult."B";
$VirtualBytes_checkresult=$VirtualBytes_checkresult."B";


$memoryusage = (substr $PrivateBytes_checkresult, 13);
#print ("$memoryusage \n");
if ($memoryusage > $opt_c){
        print ("CRITICAL: $opt_P has $PageFileBytes_checkresult $PoolNonpagedBytes_checkresult $PoolPagedBytes_checkresult $PrivateBytes_checkresult is more than $opt_c $VirtualBytes_checkresult|$PageFileBytes_checkresult;; $PoolNonpagedBytes_checkresult;; $PoolPagedBytes_checkresult;; $PrivateBytes_checkresult;; $VirtualBytes_checkresult;;\n");
        exit 2;
}elsif ($memoryusage > $opt_w){
        print ("WARNING: $opt_P has $PageFileBytes_checkresult $PoolNonpagedBytes_checkresult $PoolPagedBytes_checkresult $PrivateBytes_checkresult is more than $opt_w $VirtualBytes_checkresult|$PageFileBytes_checkresult;; $PoolNonpagedBytes_checkresult;; $PoolPagedBytes_checkresult;; $PrivateBytes_checkresult;; $VirtualBytes_checkresult;;\n");
        exit 1;
}else{
	print ("OK: $opt_P has $PageFileBytes_checkresult $PoolNonpagedBytes_checkresult $PoolPagedBytes_checkresult $PrivateBytes_checkresult $VirtualBytes_checkresult|$PageFileBytes_checkresult;; $PoolNonpagedBytes_checkresult;; $PoolPagedBytes_checkresult;; $PrivateBytes_checkresult;; $VirtualBytes_checkresult;;\n");
	exit 0;
}
#Code should never get this far
print ("Something has gone wrong with the check: $opt_P has $PageFileBytes_checkresult $PoolNonpagedBytes_checkresult $PoolPagedBytes_checkresult $PrivateBytes_checkresult $VirtualBytes_checkresult|$PageFileBytes_checkresult;; $PoolNonpagedBytes_checkresult;; $PoolPagedBytes_checkresult;; $PrivateBytes_checkresult;; $VirtualBytes_checkresult;;\n");
exit 3;
