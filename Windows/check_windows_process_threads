#!/usr/bin/perl


## Script written by Noah Guttman and Copyright (C) 2011 Noah Guttman. This script is released and distributed under the terms of the GNU General Public License

#Libraries to use
#use strict;
#use Math::Round;
use Getopt::Std;
use Time::HiRes qw(gettimeofday);
use strict;
use lib "/usr/local/nagios/perl/lib";
use lib "/usr/local/nagios/libexec/";
use utils qw($TIMEOUT %ERRORS &print_revision &support);
use vars qw($PROGNAME);
use IO::Socket::INET;
#use Sys::Hostname;
use Time::HiRes qw(gettimeofday ualarm);
use Net::Domain qw (hostname hostfqdn hostdomain);

use vars qw($opt_h $opt_H $opt_M $opt_P);
my $returnmessage = " ";
my $HandleCount_check;
my $ThreadCount_check;

my $ThreadCount_checkresult;
my $HandleCount_checkresult;

my $dtime;
my $dcheck;
my $result;
my $warning = 70;
my $critical = 80;

##init();

# Get the options
if ($#ARGV le 0) {
        print "::Windows Process Threads Check Instructions::\n\n";
        print " -h,             Display this help information\n";
        print " -H,             Hostname or IP to check\n";
        print " -M,             Specify a message to return on failure\n";
        print " -P,             Process to check\n";
        print "Script written by Noah Guttman and Copyright (C) 2011 Noah Guttman.\n";
        print "This script is released and distributed under the terms of the GNU\n";
        print "General Public License.     >>>>    http://www.gnu.org/licenses/\n";
        print "";
        print "This program is free software: you can redistribute it and/or modify\n";
        print "it under the terms of the GNU General Public License as published by\n";
        print "the Free Software Foundation.\n\n";
        print "This program is distributed in the hope that it will be useful,\n";
        print "but WITHOUT ANY WARRANTY; without even the implied warranty of\n";
        print "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n";
        print "GNU General Public License for more details.\n";
        print ">>>>    http://www.gnu.org/licenses/\n";
        exit 0;
} else {
	getopts('hH:M:P:w:c:');
}


## Display Help
if ($opt_h){
        print "::Windows Process CPU Check Instructions::\n\n";
        print " -h,             Display this help information\n";
        print " -H,             Hostname or IP to check\n";
        print " -M,             Specify a message to return on failure\n";
        print " -P,             Process to check\n";
        print "Script written by Noah Guttman and Copyright (C) 2011 Noah Guttman.\n";
        print "This script is released and distributed under the terms of the GNU\n";
        print "General Public License.     >>>>    http://www.gnu.org/licenses/\n";
        print "";
        print "This program is free software: you can redistribute it and/or modify\n";
        print "it under the terms of the GNU General Public License as published by\n";
        print "the Free Software Foundation.\n\n";
        print "This program is distributed in the hope that it will be useful,\n";
        print "but WITHOUT ANY WARRANTY; without even the implied warranty of\n";
        print "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n";
        print "GNU General Public License for more details.\n";
        print ">>>>    http://www.gnu.org/licenses/\n";
        exit 0;
}

##Set custom output if any set
if ($opt_M){
	$returnmessage=$opt_M;
}else{
	$returnmessage="";
}

$HandleCount_check= ("-H $opt_H -c CheckWMI -a \"Query\=select HandleCount from Win32_PerfRAWData_PerfProc_Process where Name=\'$opt_P\'\"");
$ThreadCount_check= ("-H $opt_H -c CheckWMI -a \"Query\=select ThreadCount from Win32_PerfRAWData_PerfProc_Process where Name=\'$opt_P\'\"");

$ThreadCount_checkresult = `/usr/local/nagios/libexec/check_nrpe $ThreadCount_check`;
$HandleCount_checkresult = `/usr/local/nagios/libexec/check_nrpe $HandleCount_check`;

$ThreadCount_checkresult = substr ($ThreadCount_checkresult, 12);
$HandleCount_checkresult = substr ($HandleCount_checkresult, 12);

chomp($ThreadCount_checkresult);
chomp($HandleCount_checkresult);

print ("$opt_P has $ThreadCount_checkresult threads which are running $HandleCount_checkresult handles|Threads=$ThreadCount_checkresult;;;; Handles=$HandleCount_checkresult;;;;\n");
exit 0;

#Code should never get this far
print ("Something has gone wrong with the check: $opt_P is at $result \% CPU |cpu_usage=$result;;;;\n");
exit 3;
